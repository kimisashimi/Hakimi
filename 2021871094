#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>

#define MAX_CHILDREN 10
#define BUFFER_SIZE 256

int pipes[MAX_CHILDREN][2];
int num_children = 0;
int running = 1;

void handle_interrupt(int sig) {
    printf("\nInterrupt received. Exiting.\n");
    running = 0;
    exit(0);
}

void parent_process() {
    char message[BUFFER_SIZE];
    printf("Enter a message: ");
    fgets(message, BUFFER_SIZE, stdin);
    for (int i = 0; i < num_children; i++) {
        write(pipes[i][1], message, strlen(message));
    }
}

void child_process(int index) {
    char message[BUFFER_SIZE];
    while (running) {
        read(pipes[index][0], message, BUFFER_SIZE);
        printf("Child %d received message: %s", index, message);
    }
}

int main() {
    signal(SIGINT, handle_interrupt);
    printf("Forking %d child processes...\n", MAX_CHILDREN);
    for (int i = 0; i < MAX_CHILDREN; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("pipe");
            exit(1);
        }
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            exit(1);
        }
        if (pid == 0) {
            child_process(i);
            exit(0);
        } else {
            num_children++;
        }
    }
    printf("Parent process running.\n");
    while (running) {
        parent_process();
    }
    return 0;
}
